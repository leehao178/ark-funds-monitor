import { Beans } from "../../rendering/beans";
import { Column } from "../../entities/column";
import { DropTarget } from "../../dragAndDrop/dragAndDropService";
import { ColDef } from "../../entities/colDef";
import { AbstractHeaderWrapper } from "./abstractHeaderWrapper";
export declare class HeaderWrapperComp extends AbstractHeaderWrapper {
    private static TEMPLATE;
    private gridOptionsWrapper;
    private dragAndDropService;
    private columnController;
    private horizontalResizeService;
    private menuFactory;
    private gridApi;
    private columnApi;
    private sortController;
    private userComponentFactory;
    private columnHoverService;
    protected beans: Beans;
    private eResize;
    private cbSelectAll;
    private readonly dragSourceDropTarget;
    protected readonly column: Column;
    protected readonly pinned: string;
    private headerComp;
    private headerCompGui;
    private headerCompVersion;
    private resizeStartWidth;
    private resizeWithShiftKey;
    private sortable;
    private menuEnabled;
    private colDefVersion;
    private refreshFunctions;
    private moveDragSource;
    private displayName;
    private draggable;
    private colDefHeaderComponent?;
    private colDefHeaderComponentFramework?;
    constructor(column: Column, dragSourceDropTarget: DropTarget, pinned: string);
    protected postConstruct(): void;
    private onColumnValueChanged;
    private updateState;
    private calculateDisplayName;
    private onNewColumnsLoaded;
    private refresh;
    private destroyHeaderComp;
    private removeMoveDragSource;
    attemptHeaderCompRefresh(): boolean;
    private addActiveHeaderMouseListeners;
    private setActiveHeader;
    protected onFocusIn(e: FocusEvent): void;
    protected onFocusOut(e: FocusEvent): void;
    protected handleKeyDown(e: KeyboardEvent): void;
    protected onTabKeyDown(): void;
    getComponentHolder(): ColDef;
    private addColumnHoverListener;
    private onColumnHover;
    private setupSortableClass;
    private onFilterChanged;
    private appendHeaderComp;
    private createParams;
    private afterHeaderCompCreated;
    private onColumnMovingChanged;
    private workOutDraggable;
    private attachDraggingToHeaderComp;
    private createDragItem;
    private setupResize;
    onResizing(finished: boolean, resizeAmount: number): void;
    onResizeStart(shiftKey: boolean): void;
    getTooltipText(): string | undefined;
    private setupTooltip;
    private setupMovingCss;
    private addAttributes;
    private setupWidth;
    private setupMenuClass;
    private onMenuVisible;
    private onColumnWidthChanged;
    private normaliseResizeAmount;
}
